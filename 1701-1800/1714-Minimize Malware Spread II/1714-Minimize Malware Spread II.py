import collections
class Solution:
    def minMalwareSpread(self, graph, initial):
        n = len(graph)
        parent = [i for i in range(n)]
        area = [1] * n
        initial_set = set(initial)
        clean = [i for i in range(n) if i not in initial_set]
        def findParent(i):
            while parent[i] != i:
                parent[i] = parent[parent[i]]
                i = parent[i]
            return i

        for i in range(len(clean)):
            for j in range(i + 1, len(clean)):
                if graph[clean[i]][clean[j]]:
                    p1 = findParent(clean[i])
                    p2 = findParent(clean[j])
                    if p1 != p2:
                        parent[p1] = p2
                        area[p2] += area[p1]
        
        table = collections.Counter()
        node_to_component = {}
        for i in initial:
            component = set()
            for j in clean:
                if graph[i][j]:
                    component.add(findParent(j))
            node_to_component[i] = component
            for c in component:
                table[c] += 1
        
        maxScore = minIndex = -1
        for i, component in node_to_component.items():
            score = 0
            for c in component:
                if table[c] == 1:
                    score += area[findParent(c)]
            if score > maxScore:
                maxScore = score
                minIndex = i
            elif score == maxScore and i < minIndex:
                minIndex = i
        return minIndex
